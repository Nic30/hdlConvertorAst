from hwt.code import If, Switch, Concat
from hwt.code_utils import rename_signal
from hwt.hwIOs.std import HwIOSignal
from hwt.hwModule import HwModule
from hwt.hwParam import HwParam
from hwt.hdl.types.array import HArray
from hwt.hdl.types.bits import HBits
from hwt.hdl.types.defs import INT, SLICE, STR, BIT, FLOAT64
from hwt.hdl.types.enum import HEnum

class RamMultiClock(HwModule):
    """
        RAM where each port has an independet clock.
        It can be configured to true dual port RAM etc.
        It can also be configured to have write mask or to be composed from multiple smaller memories.
    
        :note: write-first variant
    
        .. hwt-autodoc::
        
    """
    def hwConfig(self):
        self.ADDR_WIDTH = HwParam(8)
        self.DATA_WIDTH = HwParam(64)
        self.HAS_BE = HwParam(0)
        self.INIT_DATA = HwParam("None")
        self.MAX_BLOCK_DATA_WIDTH = HwParam("None")
        self.PORT_CNT = HwParam(2)

    def hwDeclr(self):
        ADDR_WIDTH, DATA_WIDTH, HAS_BE, INIT_DATA, MAX_BLOCK_DATA_WIDTH, PORT_CNT = \
        self.ADDR_WIDTH, self.DATA_WIDTH, self.HAS_BE, self.INIT_DATA, self.MAX_BLOCK_DATA_WIDTH, self.PORT_CNT
        # ports
        self.port_0_addr = HwIOSignal(HBits(8))
        self.port_0_clk = HwIOSignal(HBits(1))
        self.port_0_din = HwIOSignal(HBits(64))
        self.port_0_dout = HwIOSignal(HBits(64))._m()
        self.port_0_en = HwIOSignal(HBits(1))
        self.port_0_we = HwIOSignal(HBits(1))
        self.port_1_addr = HwIOSignal(HBits(8))
        self.port_1_clk = HwIOSignal(HBits(1))
        self.port_1_din = HwIOSignal(HBits(64))
        self.port_1_dout = HwIOSignal(HBits(64))._m()
        self.port_1_en = HwIOSignal(HBits(1))
        self.port_1_we = HwIOSignal(HBits(1))
        # component instances

    def hwImpl(self):
        ADDR_WIDTH, DATA_WIDTH, HAS_BE, INIT_DATA, MAX_BLOCK_DATA_WIDTH, PORT_CNT, port_0_addr, port_0_clk, port_0_din, port_0_dout, port_0_en, \
        port_0_we, port_1_addr, port_1_clk, port_1_din, port_1_dout, port_1_en, port_1_we = \
        self.ADDR_WIDTH, self.DATA_WIDTH, self.HAS_BE, self.INIT_DATA, self.MAX_BLOCK_DATA_WIDTH, self.PORT_CNT, self.port_0_addr, self.port_0_clk, self.port_0_din, self.port_0_dout, self.port_0_en, \
        self.port_0_we, self.port_1_addr, self.port_1_clk, self.port_1_din, self.port_1_dout, self.port_1_en, self.port_1_we
        # internal signals
        ram_memory = self._sig("ram_memory", HBits(64)[256], def_val=None)
        # assig_process_port_0_dout
        If(port_0_clk._onRisingEdge(),
            If(port_0_en._eq(1),
                If(port_0_we._eq(1),
                    ram_memory[port_0_addr](port_0_din)
                ),
                port_0_dout(ram_memory[port_0_addr])
            ).Else(
                port_0_dout(None)
            )
        )
        # assig_process_port_1_dout
        If(port_1_clk._onRisingEdge(),
            If(port_1_en._eq(1),
                If(port_1_we._eq(1),
                    ram_memory[port_1_addr](port_1_din)
                ),
                port_1_dout(ram_memory[port_1_addr])
            ).Else(
                port_1_dout(None)
            )
        )
class GroupOfBlockrams(HwModule):
    """
        .. hwt-autodoc::
        
    """
    def hwConfig(self):
        self.ADDR_WIDTH = HwParam(8)
        self.DATA_WIDTH = HwParam(64)

    def hwDeclr(self):
        ADDR_WIDTH, DATA_WIDTH = \
        self.ADDR_WIDTH, self.DATA_WIDTH
        # ports
        self.addr = HwIOSignal(HBits(8))
        self.clk = HwIOSignal(HBits(1))
        self.en = HwIOSignal(HBits(1))
        self.in_r_a = HwIOSignal(HBits(64))
        self.in_r_b = HwIOSignal(HBits(64))
        self.in_w_a = HwIOSignal(HBits(64))
        self.in_w_b = HwIOSignal(HBits(64))
        self.out_r_a = HwIOSignal(HBits(64))._m()
        self.out_r_b = HwIOSignal(HBits(64))._m()
        self.out_w_a = HwIOSignal(HBits(64))._m()
        self.out_w_b = HwIOSignal(HBits(64))._m()
        self.we = HwIOSignal(HBits(1))
        # component instances
        bramR_inst = self.bramR_inst = RamMultiClock()
        bramR_inst.ADDR_WIDTH = 8
        bramR_inst.DATA_WIDTH = 64
        bramR_inst.HAS_BE = 0
        bramR_inst.INIT_DATA = "None"
        bramR_inst.MAX_BLOCK_DATA_WIDTH = "None"
        bramR_inst.PORT_CNT = 2
        bramW_inst = self.bramW_inst = RamMultiClock()
        bramW_inst.ADDR_WIDTH = 8
        bramW_inst.DATA_WIDTH = 64
        bramW_inst.HAS_BE = 0
        bramW_inst.INIT_DATA = "None"
        bramW_inst.MAX_BLOCK_DATA_WIDTH = "None"
        bramW_inst.PORT_CNT = 2

    def hwImpl(self):
        ADDR_WIDTH, DATA_WIDTH, addr, clk, en, in_r_a, in_r_b, in_w_a, in_w_b, out_r_a, out_r_b, \
        out_w_a, out_w_b, we, bramR_inst, bramW_inst = \
        self.ADDR_WIDTH, self.DATA_WIDTH, self.addr, self.clk, self.en, self.in_r_a, self.in_r_b, self.in_w_a, self.in_w_b, self.out_r_a, self.out_r_b, \
        self.out_w_a, self.out_w_b, self.we, self.bramR_inst, self.bramW_inst
        # internal signals
        sig_bramR_port_0_addr = self._sig("sig_bramR_port_0_addr", HBits(8), def_val=None)
        sig_bramR_port_0_clk = self._sig("sig_bramR_port_0_clk", HBits(1), def_val=None)
        sig_bramR_port_0_din = self._sig("sig_bramR_port_0_din", HBits(64), def_val=None)
        sig_bramR_port_0_dout = self._sig("sig_bramR_port_0_dout", HBits(64), def_val=None)
        sig_bramR_port_0_en = self._sig("sig_bramR_port_0_en", HBits(1), def_val=None)
        sig_bramR_port_0_we = self._sig("sig_bramR_port_0_we", HBits(1), def_val=None)
        sig_bramR_port_1_addr = self._sig("sig_bramR_port_1_addr", HBits(8), def_val=None)
        sig_bramR_port_1_clk = self._sig("sig_bramR_port_1_clk", HBits(1), def_val=None)
        sig_bramR_port_1_din = self._sig("sig_bramR_port_1_din", HBits(64), def_val=None)
        sig_bramR_port_1_dout = self._sig("sig_bramR_port_1_dout", HBits(64), def_val=None)
        sig_bramR_port_1_en = self._sig("sig_bramR_port_1_en", HBits(1), def_val=None)
        sig_bramR_port_1_we = self._sig("sig_bramR_port_1_we", HBits(1), def_val=None)
        sig_bramW_port_0_addr = self._sig("sig_bramW_port_0_addr", HBits(8), def_val=None)
        sig_bramW_port_0_clk = self._sig("sig_bramW_port_0_clk", HBits(1), def_val=None)
        sig_bramW_port_0_din = self._sig("sig_bramW_port_0_din", HBits(64), def_val=None)
        sig_bramW_port_0_dout = self._sig("sig_bramW_port_0_dout", HBits(64), def_val=None)
        sig_bramW_port_0_en = self._sig("sig_bramW_port_0_en", HBits(1), def_val=None)
        sig_bramW_port_0_we = self._sig("sig_bramW_port_0_we", HBits(1), def_val=None)
        sig_bramW_port_1_addr = self._sig("sig_bramW_port_1_addr", HBits(8), def_val=None)
        sig_bramW_port_1_clk = self._sig("sig_bramW_port_1_clk", HBits(1), def_val=None)
        sig_bramW_port_1_din = self._sig("sig_bramW_port_1_din", HBits(64), def_val=None)
        sig_bramW_port_1_dout = self._sig("sig_bramW_port_1_dout", HBits(64), def_val=None)
        sig_bramW_port_1_en = self._sig("sig_bramW_port_1_en", HBits(1), def_val=None)
        sig_bramW_port_1_we = self._sig("sig_bramW_port_1_we", HBits(1), def_val=None)
        bramR_inst.port_0_addr(sig_bramR_port_0_addr)
        bramR_inst.port_0_clk(sig_bramR_port_0_clk)
        bramR_inst.port_0_din(sig_bramR_port_0_din)
        sig_bramR_port_0_dout(bramR_inst.port_0_dout)
        bramR_inst.port_0_en(sig_bramR_port_0_en)
        bramR_inst.port_0_we(sig_bramR_port_0_we)
        bramR_inst.port_1_addr(sig_bramR_port_1_addr)
        bramR_inst.port_1_clk(sig_bramR_port_1_clk)
        bramR_inst.port_1_din(sig_bramR_port_1_din)
        sig_bramR_port_1_dout(bramR_inst.port_1_dout)
        bramR_inst.port_1_en(sig_bramR_port_1_en)
        bramR_inst.port_1_we(sig_bramR_port_1_we)
        bramW_inst.port_0_addr(sig_bramW_port_0_addr)
        bramW_inst.port_0_clk(sig_bramW_port_0_clk)
        bramW_inst.port_0_din(sig_bramW_port_0_din)
        sig_bramW_port_0_dout(bramW_inst.port_0_dout)
        bramW_inst.port_0_en(sig_bramW_port_0_en)
        bramW_inst.port_0_we(sig_bramW_port_0_we)
        bramW_inst.port_1_addr(sig_bramW_port_1_addr)
        bramW_inst.port_1_clk(sig_bramW_port_1_clk)
        bramW_inst.port_1_din(sig_bramW_port_1_din)
        sig_bramW_port_1_dout(bramW_inst.port_1_dout)
        bramW_inst.port_1_en(sig_bramW_port_1_en)
        bramW_inst.port_1_we(sig_bramW_port_1_we)
        # assig_process_out_r_a
        out_r_a(sig_bramR_port_0_dout)
        # assig_process_out_r_b
        out_r_b(sig_bramR_port_1_dout)
        # assig_process_out_w_a
        out_w_a(sig_bramW_port_0_dout)
        # assig_process_out_w_b
        out_w_b(sig_bramW_port_1_dout)
        # assig_process_sig_bramR_port_0_addr
        sig_bramR_port_0_addr(addr)
        # assig_process_sig_bramR_port_0_clk
        sig_bramR_port_0_clk(clk)
        # assig_process_sig_bramR_port_0_din
        sig_bramR_port_0_din(in_r_a)
        # assig_process_sig_bramR_port_0_en
        sig_bramR_port_0_en(en)
        # assig_process_sig_bramR_port_0_we
        sig_bramR_port_0_we(we)
        # assig_process_sig_bramR_port_1_addr
        sig_bramR_port_1_addr(addr)
        # assig_process_sig_bramR_port_1_clk
        sig_bramR_port_1_clk(clk)
        # assig_process_sig_bramR_port_1_din
        sig_bramR_port_1_din(in_r_b)
        # assig_process_sig_bramR_port_1_en
        sig_bramR_port_1_en(en)
        # assig_process_sig_bramR_port_1_we
        sig_bramR_port_1_we(we)
        # assig_process_sig_bramW_port_0_addr
        sig_bramW_port_0_addr(addr)
        # assig_process_sig_bramW_port_0_clk
        sig_bramW_port_0_clk(clk)
        # assig_process_sig_bramW_port_0_din
        sig_bramW_port_0_din(in_w_a)
        # assig_process_sig_bramW_port_0_en
        sig_bramW_port_0_en(en)
        # assig_process_sig_bramW_port_0_we
        sig_bramW_port_0_we(we)
        # assig_process_sig_bramW_port_1_addr
        sig_bramW_port_1_addr(addr)
        # assig_process_sig_bramW_port_1_clk
        sig_bramW_port_1_clk(clk)
        # assig_process_sig_bramW_port_1_din
        sig_bramW_port_1_din(in_w_b)
        # assig_process_sig_bramW_port_1_en
        sig_bramW_port_1_en(en)
        # assig_process_sig_bramW_port_1_we
        sig_bramW_port_1_we(we)
